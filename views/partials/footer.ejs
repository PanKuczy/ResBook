<footer>
    footer-sruter
</footer>

<script>

// AUTO FIT INPUT ON PAGE LOAD
document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('input.editable').forEach(input => {
        input.size = input.value.length;
    });
});

// COLOR PICKER AND INVERTER
let colorPickerInverted = "red";
function colorPickerData(data) {
    const color = data.toRGBString();
    const currentButton = data.previewElement;
    console.log(data);
    // console.log(data.previewElement);
    console.log("Base color", color);
    const invertedColor = invertColor(color);
    console.log("Inverted color: ", invertedColor);
    colorPickerInverted = invertedColor;
    if (currentButton.classList.contains('color-selector-button')) {
        currentButton.style.color = colorPickerInverted;
        currentButton.style.borderColor = colorPickerInverted;
    } else if (currentButton.classList.contains('color-selector-icon')){
        const parentDiv = currentButton.parentNode
        const childInput = parentDiv.querySelector('input');
        // console.log(currentButton.parentNode);
        parentDiv.setAttribute('data-color', color);
        parentDiv.setAttribute('data-invert-color', color);
        parentDiv.style.color = invertedColor;
        parentDiv.style.backgroundColor = color;
        parentDiv.style.borderColor = invertedColor;
        if (parentDiv.style.boxShadow) {
            console.log(parentDiv.style.boxShadow);
            parentDiv.style.boxShadow = `${color} 0px 0px 0px 4px`
        }
        childInput.style.color = invertedColor;
        childInput.style.backgroundColor = color;

    }

    return invertedColor;
}

function invertColor (color) {
    const regex = /rgb\((\d+),\s*(\d+),\s*(\d+)\)/;
    const result = color.match(regex);
    let invertColor = "";
    if (result) {
        const colorSum = parseInt(result[1], 10) + parseInt(result[2], 10) + parseInt(result[3], 10);
        if (colorSum>382){
            invertColor =  `hsl(from ${color} h calc(s + 15) calc(l - 35))`;
            return invertColor;
        } else {
            invertColor =  `hsl(from ${color} h 100 calc(l + 35))`;
            return invertColor;
        }
    } else {
        throw new Error("Invalid RGB string");
    }
}

// SORT

    function sortCategoriesList(){
        //non ediatble list
        const nonEditList = document.querySelector('#categories-list');

        [...nonEditList.children]
        .sort((a, b) => a.innerText.localeCompare(b.innerText, undefined, {sensitivity: 'base'}))
        .forEach(node => nonEditList.appendChild(node));

        //editable list
        const editableList = document.querySelector('#categories-list-editable');

        [...editableList.children]
        .sort((a, b) => a.querySelector('li').getAttribute('data-name').localeCompare(b.querySelector('li').getAttribute('data-name'), undefined, {sensitivity: 'base'}))
        .forEach(node => editableList.appendChild(node));

        //bookheadings
        const bookHeadings = document.getElementsByClassName('book-categories-row');
        for (const item of bookHeadings) {
            [...item.children]
            .sort((a, b) => a.innerText.localeCompare(b.innerText, undefined, {sensitivity: 'base'}))
            .forEach(node => item.appendChild(node));
            }

    }

    function sortTagsRow(){
        // non editable list
        const nonEditLists = document.querySelectorAll('.all-tags-row, .note-tags-row');
        const editLists = document.querySelectorAll('.edit-tags-form > .all-tags-row , .edit-tags-form > .note-tags-row ');
        nonEditLists.forEach(tagsRowContainer =>{
            [...tagsRowContainer.children]
            .sort((a, b) => a.innerText.localeCompare(b.innerText, undefined, {sensitivity: 'base'}))
            .forEach(node => tagsRowContainer.appendChild(node));
        });

        editLists.forEach(tagsRowContainer =>{
            [...tagsRowContainer.children]
            .sort((a, b) => a.getAttribute('data-name').localeCompare(b.getAttribute('data-name'), undefined, {sensitivity: 'base'}))
            .forEach(node => tagsRowContainer.appendChild(node));
            // [...tagsRowContainer.children].forEach(el => {
            //     console.log("Element item" ,el, el.getAttribute('data-name'));
            // })
        });

    }


    function sortNotesToggle(order, singleResource){
        // trzeba jeszcze dodac togglowanie przy klikaniu ikony ze strzalka lub wyborze z listy
        const notesBoxes = singleResource?.getElementsByClassName('notes-box') ?? document.getElementsByClassName('notes-box');

        if (order == 'date-ascending') {
            for (const item of notesBoxes) {
            [...item.querySelectorAll('.single-note-item')]
            .sort((a, b) => a.querySelector('.note-date').innerText.localeCompare(b.querySelector('.note-date').innerText, undefined, {sensitivity: 'base'}))
            .forEach(node => item.appendChild(node));
            }
        } else {
            for (const item of notesBoxes) {
            [...item.querySelectorAll('.single-note-item')]
            .sort((b, a) => a.querySelector('.note-date').innerText.localeCompare(b.querySelector('.note-date').innerText, undefined, {sensitivity: 'base'}))
            .forEach(node => item.appendChild(node));
            }   
        }

    }
    //call sorting on page load
    sortCategoriesList();
    sortNotesToggle('date-descending', null);
    sortTagsRow();


// FORM TO OBJECT CONVERT - REUSABLE FUNCTION
    function formToObject(formDomId){
        const form = document.getElementById(formDomId);
        // Create a FormData object from the form
        const formData = new FormData(form);
        // Convert FormData to a plain object (or you can directly send FormData)
        const formObjectData = {};
        formData.forEach((value, key) => {
            formObjectData[key] = value;
        });
        return formObjectData;
    }

// TOGGLE RESOURCE
// forceDirection can have "up" or "down" values
function toggleResource(id, forceDirection) {
        // console.log("Clicked ID: ", id);
        const rollout = document.getElementById("notesbox-" + id);
        let icon = document.getElementById('toggle-notes-icon-' + id);
        // check forced direction
        if (!forceDirection) {
            if (icon.classList.value === 'fa-solid fa-circle-chevron-down') {
                icon.classList.value = 'fa-solid fa-circle-chevron-up';
            } else {
                icon.classList.value = 'fa-solid fa-circle-chevron-down';
            }

            // console.log(rollout.classList);
            if (rollout.classList.value == "notes-box hidden" || rollout.classList.value === '') {
                rollout.classList.remove("hidden");
                rollout.classList.add("visible");
            } else {
                rollout.classList.add("hidden");
                rollout.classList.remove("visible");
            }
        } else if (forceDirection === "down") {
            icon.classList.value = 'fa-solid fa-circle-chevron-up';
            rollout.classList.remove("hidden");
            rollout.classList.add("visible");
        } else if (forceDirection === "up") {
            icon.classList.value = 'fa-solid fa-circle-chevron-down';
            rollout.classList.add("hidden");
            rollout.classList.remove("visible");
        }
    }



// ONCLICKS ale tylko niektore

    function handler(id) {
        console.log(id);
        document.getElementById("add-" + id).classList.remove("hidden")
        document.getElementById("add-" + id).classList.add("visible")
    }

// FILTERING RESOURCES BASIC FUNCTIONS
    let filtered = false;
    // const frontEndResources = <%-// JSON.stringify(resources) %>; //to chyba jednak nie bedzie potrzbene jak i cale zbieranie zasobow. niech ta funkcja opreuje tylko na DOM id'sach

    let filteredResourcesIds = [];
    let filteredResourcesDomIds = [];

    // zebranie wszystkich ksiazek
    const userBooks = document.getElementsByClassName('user-book');
    // zebranie DOMid wszystkich ksiazek
    let userBooksDomIds = [];
    for (let book of userBooks) {
        userBooksDomIds.push(book.id);
    };
    // console.log("User books DOM IDs: ", userBooksDomIds);
    filteredResourcesDomIds = [...userBooksDomIds];
    // console.log("filteredResourcesDomIds: ", filteredResourcesDomIds);

    function filterResources(add, remove, isolate) {
        // console.log("filtrowanie: ", add, remove, isolate);

        if (isolate) {
            filteredResourcesDomIds = [`resource-id-${isolate}`];
            toggleResource(isolate, "down");

            } else if(add) {
                const newId = `resource-id-${add}`;
                if (!filteredResourcesDomIds.includes(newId)) {
                    filteredResourcesDomIds.push(newId); // Only add if it doesn't exist already
                }
            } else if(remove) {
                const indexToRemove = filteredResourcesDomIds.indexOf(`resource-id-${remove}`);
                // console.log("Remove item index: ", indexToRemove);
                if (indexToRemove !== -1) {
                    filteredResourcesDomIds.splice(indexToRemove, 1);
                    // console.log("filteredResourcesDomIds: ", filteredResourcesDomIds);
                }
            }

        let booksToHide = userBooksDomIds.filter(domId => {
            return !filteredResourcesDomIds.includes(domId);
        });
        // console.log("Books DOM IDs to hide: ", booksToHide);
        for (let bookId of booksToHide) {
            document.getElementById(bookId).classList.add("hidden")
            document.getElementById(bookId).classList.remove("visible")
        }
    }



// FILTER BY CATEGORY
    // na razie skopiowana na chama z tagsow
    let selectedCatIds = [];
    let selectedCatNames = [];

    function selectCategory(element, resourceId) {
        const catId = element.getAttribute('data-id');
        const catName = element.getAttribute('data-name');

        //Ids
        if (selectedCatIds.includes(catId)) {
            selectedCatIds = selectedCatIds.filter(id => id !== catId);
            element.classList.remove('clicked');
        } else {
            selectedCatIds.push(catId);
            element.classList.add('clicked');
        }
        //Names
        if (selectedCatNames.includes(catName)) {
            selectedCatNames = selectedCatNames.filter(name => name !== catName);
        } else {
            selectedCatNames.push(catName);
        }

        //tu dalej powinna byc funkcja filtrujaca

        // document.getElementById('selectedNewNoteCats-' + resourceId).value = selectedCatIds.join(',');
        // document.getElementById('selectedNewNoteCatsNames-' + resourceId).value = selectedCatNames.join(',');
    }


// ADD NEW CATEGORY
    function addNewCategory(formId) {
        // Prevent default form submission
        event.preventDefault();
        const form = document.getElementById(formId);
        const formObject = formToObject(formId);

        // Check if the input is not empty
        if (!formObject.newCategoryName) {
            return false;
        } else {
            // axios route
            axios.post('/add-category', formObject)
                .then((response) => {
                    // console.log("Response :" , response.data);
                    if (response.data.success) {
                        const newCategoryResponse = response.data.newCategory;
                        // console.log("Response data :", response.data);
                        // CREATE ELEMENTS
                        // non editable list
                        let newCategoryElement = document.createElement('li');
                        newCategoryElement.classList.add('categories-item');
                        newCategoryElement.setAttribute('id', `category-id-${newCategoryResponse.id}`);
                        newCategoryElement.setAttribute('draggable', 'true');
                        newCategoryElement.setAttribute('data-id', `${newCategoryResponse.id}`); 
                        newCategoryElement.setAttribute('data-name', `${formObject.newCategoryName}`); 
                        newCategoryElement.setAttribute('onclick', `selectCategory(this, ${newCategoryResponse.id})`); 
                        newCategoryElement.innerHTML = formObject.newCategoryName;
                        document.getElementById('categories-list').appendChild(newCategoryElement);
                        // editable list
                        let newCategoryEditableElement = document.createElement('div');
                        newCategoryEditableElement.classList.add('deletable-item', 'visible');
                        newCategoryEditableElement.setAttribute('id', `editable-category-row-${newCategoryResponse.id}`);

                        newCategoryEditableElement.innerHTML = `
                        <button 
                        class="icon-button tooltip-container" 
                        id="delete-category-${newCategoryResponse.id}"
                        type="button"
                        onclick="showConfirmationPopup('${newCategoryResponse.id}', '/delete-category', null, 'editable-category-row-${newCategoryResponse.id}', 'category-id-${newCategoryResponse.id}')">
                        <i class="fa-solid fa-trash"></i><span class="tooltip">delete category</span>
                        </button><li class="categories-item" data-id="${newCategoryResponse.id}" data-name="${formObject.newCategoryName}" ><input type="text" id="editable-category-${newCategoryResponse.id}" value="${formObject.newCategoryName}" required></li>
                        `;
                        document.getElementById('categories-list-editable').appendChild(newCategoryEditableElement);

                        form.reset();
                        sortCategoriesList()
                    } else {
                        alert('Error adding category (response).');
                    }
  
                })
                .catch((error) => {
                    console.error('Error adding category:', error);
                    alert('Error adding category (catch).');
                });

        }
    }

// EDIT CATEGORIES
    // Buttons toggle
    function editCategoriesToggle(){
        let categoriesListDisplay = document.getElementById('categories-list').style.display;
        let form = document.getElementById('edit-categories-form');
        // let categoriesEditListDisplay = document.getElementById('categories-list-editable').style.display;
        if (categoriesListDisplay == 'block') {
            document.getElementById('categories-list').style.display = 'none';
            document.getElementById('categories-list-editable').style.display = 'block'
            document.getElementById('edit-categories-submit-button').removeAttribute('disabled');
            document.getElementById('edit-categories-cancel-button').removeAttribute('disabled');
        } else {
            document.getElementById('categories-list').style.display = 'block';
            document.getElementById('categories-list-editable').style.display = 'none'
            document.getElementById('edit-categories-submit-button').disabled ='true';
            document.getElementById('edit-categories-cancel-button').disabled ='true';
            form.reset();
        }
    }


    // EDIT CATEGORIES
    function editCategoriesSubmit(formId){
        // Prevent default form submission
        event.preventDefault();

        // Get the form element
        // const form = document.getElementById(formId); chyba niepotrzbene juz
        // Get data from inputs, collect items to change
        const editableList = document.getElementById('categories-list-editable');
        const editableListItems = editableList.querySelectorAll('li.categories-item');

        // console.log(editableListItems);
        let formObject = [];
        editableListItems.forEach(cat => {
            formObject.push({
                id: cat.getAttribute('data-id'),
                name: cat.querySelector('input').value
            });

        });
        // console.log("formObject array :", formObject);

        // Check if there are no empty inputs
        if (formObject.find((item) => item.name == "")) {
            alert("Invalid category name!")
            return false;
        } else {
            // axios route
            axios.put('/edit-categories', formObject)
                .then((response) => {
                    // console.log("Response :" , response.data);
                    if (response.data.success) {
                        const newCategoryResponse = response.data.newCategory;
                        // console.log("Response data :", response.data);

                        // UPDATE HTML ELEMENTS
                        formObject.forEach(formItem => {
                            // non editable categories list
                            const nonEditableListItem = document.getElementById('categories-list').querySelector(`li[data-id="${formItem.id}"]`);
                            if (nonEditableListItem) {
                                nonEditableListItem.setAttribute('data-name', formItem.name);
                                nonEditableListItem.innerHTML = formItem.name;
                            }
                            // editable categories list
                            const editableListItem = document.getElementById('categories-list-editable').querySelector(`li[data-id="${formItem.id}"]`);
                            if (editableListItem) {
                                editableListItem.setAttribute('data-name', formItem.name);
                                const inputElement = editableListItem.querySelector('input');
                                inputElement.setAttribute('value', formItem.name);
                            }
                            // books
                            const booksCategories = document.getElementsByClassName(`book-with-category-${formItem.id}`);
                            if (booksCategories) {
                                for (const classInstance of booksCategories) {
                                    classInstance.innerHTML = formItem.name;
                                }
                            }
                        });

                        sortCategoriesList()
                        // toggle back the buttons
                        
                        editCategoriesToggle()

                    } else {
                        alert('Error updating categories (response).');
                    }
  
                })
                .catch((error) => {
                    console.error('Error updating categories:', error);
                    alert('Error updating categories (catch).');
                });
        }
    }




// ADD NEW NOTE
    // Cancel new note form
    function cancelNewNote(id){
        document.getElementById(id).classList.add("hidden");
        document.getElementById(id).classList.remove("visible");
        document.getElementById(`tag-rollout-${id.slice(13)}`).classList.add("hidden-fast");
        document.getElementById(`tag-rollout-${id.slice(13)}`).classList.remove("visible-fast");
        document.getElementById(`tag-rollout-${id.slice(13)}`).classList.remove("active-rollout");
        clearSelectedTags();
    }

    // Resize text areas automatically
    const textareas = document.getElementsByClassName('new-note-text');
    for (let element of textareas) {
        element.addEventListener('input', function() {
            // Reset the height to allow shrinking if necessary
            this.style.height = 'auto';
            // Set the new height based on the scroll height
            this.style.height = (this.scrollHeight) + 'px';
        });
    };


// SELECT TAGS ROLLOUT, FOR NEW NOTE AND EXISTING NOTE
    let selectedTagIds = [];
    let selectedTagNames = [];
    let selectedTagColors = [];
    let selectedTagColorsInv = [];
    //helper function
    function clearSelectedTags(){
        const globalTagsCollection = document.querySelectorAll('.single-note-tags');
        globalTagsCollection.forEach(element =>{
            element.classList.remove('clicked');
            element.style.boxShadow = '';
        });
    }

    function selectTagsRolloutToggle(button, resourceId, noteId) {
        // console.log(button);
        // prep all rollouts
        const allRollouts = document.querySelectorAll('.tag-rollout-drawer');
        allRollouts.forEach(element => {
            element.classList.remove('active-rollout');
        });
        // clear all buttons
        document.querySelectorAll('.note-tags-row .icon-button-tags').forEach(element => {
            element.classList.remove('clicked');
        });
        document.querySelectorAll('.new-note-tag-rollout-button .fa-square-caret-down').forEach(element =>{
            element.classList.remove('fa-square-caret-down');
            element.classList.add('fa-square-caret-right');
        });

        // clear ids array
        selectedTagIds.length = 0;       
        let rollout = undefined;
        //check if called from new note box or existing note
        if (!noteId) {
            rollout = document.getElementById('tag-rollout-' + resourceId);
            // Change icon in new note box
            let triangle = document.getElementById('triangle-icon-' + resourceId);
            if (triangle.classList.value === 'fa-solid fa-square-caret-right') {
                triangle.classList.value = 'fa-solid fa-square-caret-down';
            } else {
                triangle.classList.value = 'fa-solid fa-square-caret-right';
            }
        } else {
            //change button appearance
            button.classList.add('clicked');

            // clear all .clicked classes
            clearSelectedTags()

            rollout = document.getElementById('tag-rollout-' + resourceId + '-' + noteId);
            
            // get list of current tag ids
            const currentTags = document.getElementById('note-id-' + noteId).querySelectorAll('.note-tags-row > .single-note-tags');
            console.log("current tags", currentTags);
            currentTags.forEach(element =>{
                selectedTagIds.push(element.getAttribute('data-id'));
            });
            console.log("current tag ids: ", selectedTagIds);
        }
        rollout.classList.add("active-rollout"); //prevent from closing
        // close all other rollouts
        const otherRollouts = document.querySelectorAll('.tag-rollout-drawer:not(.active-rollout)');
        // console.log(otherRollouts);
        otherRollouts.forEach(element => {
            element.classList.add("hidden-fast");
            element.classList.remove("visible-fast");
        }) ;
        
        // Toggle tags rollouts
        if (rollout.classList.value == "tag-rollout-drawer hidden-fast active-rollout" || rollout.classList.value === '') {
            rollout.classList.remove("hidden-fast");
            rollout.classList.add("visible-fast");

            // Get the button's position and size relative to the viewport
            const buttonRect = button.getBoundingClientRect();
            // console.log(buttonRect);
            const popupRect = rollout.getBoundingClientRect();
            // console.log(popupRect);

            // Set the initial position of the popup below the button
            let topPosition = 32;
            let leftPosition = 0; 

            // Get the viewport dimensions
            const viewportHeight = window.innerHeight;
            // const viewportWidth = window.innerWidth;
            const viewportWidth = document.body.clientWidth;
            // console.log("viewport w", viewportWidth);

            // Check if the popup will overflow vertically
            if (buttonRect.bottom + popupRect.height > viewportHeight + window.scrollY) {
                // If it will, position the popup above the button
                topPosition = buttonRect.top + window.scrollY - popupRect.height;
            }

            // Check if the popup will overflow horizontally (if needed)
            if (buttonRect.left + popupRect.width > viewportWidth) {
                // If it will, adjust the popup to stay within the screen width
                leftPosition = viewportWidth - buttonRect.left - popupRect.width;
            }

            // Apply the adjusted positions
            rollout.style.top = `${topPosition}px`;
            rollout.style.left = `${leftPosition}px`;


            // Mark existing tags as clicked
            const allTagsCollection = rollout.querySelectorAll('.single-note-tags');
            Array.from(allTagsCollection).forEach(tag => {
                const tagId = tag.getAttribute('data-id');
                const tagColor = tag.getAttribute('data-color');
                if (selectedTagIds.includes(tagId)) {
                    tag.classList.add('clicked'); // Add the 'clicked' class
                    tag.style.boxShadow = `0 0 0 4px ${tagColor}`;
                }
            });
            // console.log(filteredTags);

        } else {
            button.classList.remove('clicked');
            document.querySelectorAll('.new-note-tag-rollout-button .fa-square-caret-down').forEach(element =>{
            element.classList.remove('fa-square-caret-down');
            element.classList.add('fa-square-caret-right');
            });
            rollout.classList.add("hidden-fast");
            rollout.classList.remove("visible-fast");
            rollout.classList.remove("active-rollout");
            selectedTagIds.length = 0;
            console.log(selectedTagIds);
        }
    }


    // NEW NOTE ROLLOUT - SELECT TAGS

    function selectTag(element, resourceId, noteId) {
        const tagId = element.getAttribute('data-id');
        const tagName = element.getAttribute('data-name');
        const tagColor = element.getAttribute('data-color');
        const tagInvertColor = element.getAttribute('data-invert-color');

        //Ids
        if (selectedTagIds.includes(tagId)) {
            selectedTagIds = selectedTagIds.filter(id => id !== tagId);
            element.classList.remove('clicked');
            element.style.boxShadow = '';
        } else {
            selectedTagIds.push(tagId);
            element.classList.add('clicked');
            element.style.boxShadow = `0 0 0 4px ${tagColor}`;
        }
        //Names
        if (selectedTagNames.includes(tagName)) {
            selectedTagNames = selectedTagNames.filter(name => name !== tagName);
        } else {
            selectedTagNames.push(tagName);
        }
        //Colors
        if (selectedTagColors.includes(tagColor)) {
            selectedTagColors = selectedTagColors.filter(color => color !== tagColor);
        } else {
            selectedTagColors.push(tagColor);
        }
        //Inverted Colors
        if (selectedTagColorsInv.includes(tagInvertColor)) {
            selectedTagColorsInv = selectedTagColorsInv.filter(color => color !== tagInvertColor);
        } else {
            selectedTagColorsInv.push(tagInvertColor);
        }
        document.getElementById('selectedNewNoteTags-' + resourceId).value = selectedTagIds.join(',');
        document.getElementById('selectedNewNoteTagsNames-' + resourceId).value = selectedTagNames.join(',');
        document.getElementById('selectedNewNoteTagsColors-' + resourceId).value = selectedTagColors.join(',');
        document.getElementById('selectedNewNoteTagsColorsInv-' + resourceId).value = selectedTagColorsInv.join(',');
    }

//////////////////////////////////////////////////////////////////////

    // ADD NEW TAG - IN NEW NOTE AND EXISTING NOTE
    function addTag(resourceId, noteId) {

        let newTagRollout = "";
        let newTagInput = "";
        let newTagColorInput = "";
        // check if it's called from new note or existing note
        if (!noteId) {
            newTagRollout = document.querySelector(`#tag-rollout-${resourceId}`);
            newTagInput = newTagRollout.querySelector('.add-new-tag-input');
            newTagColor = newTagRollout.querySelector('.color-selector-button');
        } else {
            newTagRollout = document.querySelector(`#tag-rollout-${resourceId}-${noteId}`);
            newTagInput = newTagRollout.querySelector('.add-new-tag-input');
            newTagColor = newTagRollout.querySelector('.color-selector-button');
        }
        //check if name is provided
        if (!newTagInput.value) {
            return false;
        } else {
            // console.log("New tag name:",newTagInput.value);
            // console.log("New tag color picker element ", newTagColor);
            // console.log("New tag color: ", newTagColor.getAttribute('data-current-color'));
            const newCategoryColor = newTagColor.getAttribute('data-current-color');
            const newCategoryInvertedColor = invertColor(newCategoryColor);

            const data = {
                name: newTagInput.value,
                color: newCategoryColor
            };

            axios.post("/add-new-tag", data)
            .then(response => {
                if (response.data.success) {
                    //non editable tags rows
                    let allTagsRows = document.querySelectorAll('.tag-rollout-drawer > .all-tags-row');
                    // console.log(allTagsRows);
                    // this must go in a loop beacause the append child works only once per node
                    allTagsRows.forEach(element => {
                        let newCategoryElement = document.createElement('span');
                        newCategoryElement.classList.add('tag', 'single-note-tags', 'visible-horizontal');
                        newCategoryElement.setAttribute('data-id', response.data.id);
                        newCategoryElement.setAttribute('data-name', newTagInput.value);
                        newCategoryElement.setAttribute('data-color', newCategoryColor);
                        newCategoryElement.setAttribute('data-invert-color', newCategoryInvertedColor); 
                        newCategoryElement.style.backgroundColor = newCategoryColor;
                        newCategoryElement.style.color = newCategoryInvertedColor; 
                        newCategoryElement.style.borderColor = newCategoryInvertedColor; 
                        newCategoryElement.setAttribute('onclick', `selectTag(this, ${resourceId})`);
                        newCategoryElement.innerText = newTagInput.value;
                        // console.log("new tag element :", newCategoryElement);

                        // console.log(element);
                        element.appendChild(newCategoryElement);
                    });

                    //editable tags rows
                    let allTagsRowsEditable = document.querySelectorAll('.edit-tags-form > .all-tags-row');
                    allTagsRowsEditable.forEach(element => {
                        let newCategoryElement = document.createElement('div');
                        newCategoryElement.classList.add('editable-tag-row', 'tag', 'single-note-tags', 'visible-horizontal');
                        newCategoryElement.setAttribute('data-name', newTagInput.value);
                        newCategoryElement.setAttribute('data-id', response.data.id);                        
                        newCategoryElement.setAttribute('data-color', newCategoryColor);
                        newCategoryElement.setAttribute('data-invert-color', newCategoryInvertedColor); 
                        newCategoryElement.style.backgroundColor = newCategoryColor;
                        newCategoryElement.style.color = newCategoryInvertedColor; 
                        newCategoryElement.style.borderColor = newCategoryInvertedColor; 
                        newCategoryElement.innerHTML =`
                            <input type="text" oninput="this.size = this.value.length" class="tag editable" value="${newTagInput.value}" style="background-color:${newCategoryColor}; color: ${newCategoryInvertedColor};" size="${newTagInput.value.length}" >                                                           
                            <button class="delete-button icon-button tooltip-container delete-tag-${response.data.id}" type="button" onclick="showConfirmationPopup('${response.data.id}', '/delete-tag', ${resourceId}, null, null)">
                            <i class="fa-solid fa-trash" aria-hidden="true"></i><span class="tooltip">delete tag</span>
                            </button>
                        `;

                        element.appendChild(newCategoryElement);
                    });

                    sortTagsRow();
                    //clear the input
                    newTagInput.value = ""
                }
            })
            .catch(error => {
                console.error('Error creating new tag:', error);
                alert('Error creating new tag');
            });


        }


    }

// ASSIGN TAGS TO NOTE
    function assignTags(button, resourceId, noteId){
        console.log("Tags assignment client request. Note: ", noteId, " Tag Ids: ", selectedTagIds);

        const data = {
            resource_id: resourceId,
            note_id: noteId,
            tags_ids: selectedTagIds
        };
        axios.post("/assign-tags", data)
        .then(response =>{
            if (response.data.success) {
                // console.log(response.data.tags_obj);
                const noteTagsRow = document.querySelector(`#note-id-${noteId}`).querySelector('.note-tags-row');
                const oldTags = noteTagsRow.querySelectorAll(':scope > span');
                console.log(oldTags);
                oldTags.forEach(element => {
                    element.remove();
                });
                // console.log("note tags row" ,noteTagsRow);
                response.data.tags_obj.forEach(tagObj =>{
                    console.log(tagObj);
                    const newTagElement = document.createElement('span');
                    newTagElement.classList.add('single-note-tags');
                    newTagElement.setAttribute('data-id', tagObj.id);
                    newTagElement.setAttribute('data-name', tagObj.name);
                    newTagElement.setAttribute('data-color', tagObj.color);
                    newTagElement.setAttribute('data-invert-color', tagObj.invertColor);
                    newTagElement.style.backgroundColor = tagObj.color;
                    newTagElement.style.color = tagObj.invertColor;
                    newTagElement.style.borderColor = tagObj.invertColor;
                    newTagElement.innerText = tagObj.name;
                    noteTagsRow.appendChild(newTagElement);
                });

                sortTagsRow();
                
                //toggle off tags rollout and clear button
                const rollout = document.getElementById('tag-rollout-' + resourceId + '-' + noteId);
                rollout.classList.add("hidden-fast");
                rollout.classList.remove("visible-fast");
                rollout.classList.remove("active-rollout");
                document.querySelector(`#note-id-${noteId}`).querySelector('.icon-button-tags').classList.remove('clicked');
                selectedTagIds.length = 0;

            }
        })
        .catch(error => {
                console.error('Error assigning tags:', error);
                alert('Error assigning tags');
        });

    }


// EDIT AND DELETE TAGS
    // Buttons toggle
    function editTagsToggle(resourceId, noteId){
        let parentRollout = undefined;
        let tagsContainer = undefined;
        let editableTagsContainer = undefined;
        let form = undefined;
        // let categoriesEditListDisplay = document.getElementById('categories-list-editable').style.display;
        //check if called from new note or existing note
        if (!noteId) {
            // dodac dla nowej notatki
            tagsContainer = document.querySelector(`#tag-container-${resourceId}`);
            editableTagsContainer = document.querySelector(`#edit-tag-container-${resourceId}`);
            parentRollout = document.querySelector(`#tag-rollout-${resourceId}`);
            return false;
        } else {
            tagsContainer = document.querySelector(`#tag-container-${resourceId}-${noteId}`);
            editableTagsContainer = document.querySelector(`#edit-tag-container-${resourceId}-${noteId}`);
            parentRollout = document.querySelector(`#tag-rollout-${resourceId}-${noteId}`);
        }
        //toggle
        if (tagsContainer.style.display == 'flex') {
            tagsContainer.style.display = 'none';
            editableTagsContainer.style.display = 'flex'
            parentRollout.querySelector('.edit-tags-submit-button').removeAttribute('disabled');
            parentRollout.querySelector('.edit-tags-cancel-button').removeAttribute('disabled');
            parentRollout.querySelectorAll('.separator-2')[1].style.display = 'none';
            parentRollout.querySelector('.assign-tags-confirm').style.display = 'none';
            parentRollout.querySelector('h4').innerText = 'Edit Note Tags';
        } else {
            tagsContainer.style.display = 'flex';
            editableTagsContainer.style.display = 'none'
            parentRollout.querySelector('.edit-tags-submit-button').disabled ='true';
            parentRollout.querySelector('.edit-tags-cancel-button').disabled ='true';
            parentRollout.querySelectorAll('.separator-2')[1].style.display = 'block';
            parentRollout.querySelector('.assign-tags-confirm').style.display = 'inline-block';
            parentRollout.querySelector('h4').innerText = 'Assign Note Tags';
            // form.reset();
        }
    }


// NOWE SUBMIT NOTE Z AXIOS i RES.JSON
    function submitNewNote(formId) {
        // Prevent default form submission
        event.preventDefault();

        // Get the form element
        const form = document.getElementById(formId);
        const formObject = formToObject(formId);

        // Send the data using axios
        axios.post('/add-note', formObject)
        .then((response) => {
            if (response.data.success) {
                const newNote = response.data.newNote;
                // console.log(newNote);
                console.log("response", response.data);

                // Create a new note DOM element
                const newNoteElement = document.createElement('div');
                newNoteElement.classList.add('single-note-item', 'deletable-item', 'hidden');
                newNoteElement.setAttribute('id', `note-id-${newNote.note_id}`);

                // create tags row
                let tagsRowHtml = "";
                for (const tag of newNote.selectedTags) {
                    tagsRowHtml = tagsRowHtml.concat(`<span class="single-note-tags" data-id="${tag.id}" data-name="${tag.name}" data-color="${tag.color}" data-invert-color="${tag.invertColor}" style="background-color: ${tag.color}; color: ${tag.invertColor}; border-color: ${tag.invertColor}">${tag.name}</span>`);
                }
                // copy all tags row for the assign tags rollout
                const newAllTagsRow = document.querySelector(`#tag-container-${newNote.resource_id}`).cloneNode(true);
                newAllTagsRow.id = `tag-container-${newNote.resource_id}-${newNote.note_id}`;

                // empty fields check
                let pagesHtml = ""
                if (newNote.target_pages) {pagesHtml = `Pages: ${newNote.target_pages}`}
                let linkHtml = ""
                if (newNote.target_object) {linkHtml = `Link: <a href="${newNote.target_object}" rel="noopener noreferrer" target="_blank">${newNote.target_object}</a>`}
                
                newNoteElement.innerHTML = `
                <div class="note-heading-row">
                    <div class="note-date-del-edit-row">

                        <form action="/edit-note" method="post">
                            <input type="hidden" name="note_id" value="${newNote.note_id}">
                            <button class="icon-button tooltip-container" type="edit" name="edit-note" onclick="handler('edit-note')">
                                <i class="fa-solid fa-file-pen" aria-hidden="true"></i><span class="tooltip">edit note</span>
                            </button>
                        </form>

                        <button class="icon-button tooltip-container" id="delete-note-${newNote.note_id}" type="button" onclick="showConfirmationPopup('${newNote.note_id}', '/delete-note', '${newNote.resource_id}', 'note-id-${newNote.note_id}')">
                            <i class="fa-solid fa-trash" aria-hidden="true"></i><span class="tooltip">delete note</span>
                        </button>
                        <p class="note-date" value="date" id="note-${newNote.note_id}-date"> ${newNote.formattedDate}</p>

                    </div>
                    <!-- NOTE HEADING: TAGS -->
                    <div class="note-tags-row">
                        <button class="icon-button-tags tooltip-container" type="add" name="add-tag" onclick="selectTagsRolloutToggle(this, '${newNote.resource_id}', '${newNote.note_id}')">+<span class="tooltip">assign note tags</span></button>
                        <div id="tag-rollout-${newNote.resource_id}-${newNote.note_id}" class="tag-rollout-drawer hidden-fast">
                            ${newAllTagsRow.outerHTML}
                            <div class="add-new-tag-miniform">
                                <input class="add-new-tag-input" type="text" placeholder="New tag name..." />
                                <button class="color-selector-button" data-jscolor="{value:'#5ED8FF'}" >color</button>
                                <button class="text-button" type="button" onclick="addTag(${newNote.resource_id}, ${newNote.note_id})">Add New Tag</button>
                            </div>
                            <div>
                                <button class="assign-tags-confirm" type="button" onclick="assignTags(this, ${Number(newNote.resource_id)}, ${Number(newNote.note_id)})">Confirm Tags</button>
                            </div>
                            <input type="hidden" name="selectedTagIds" id="selectedNewNoteTags-${newNote.resource_id}-${newNote.note_id}" />
                            <input type="hidden" name="selectedTagsNames" id="selectedNewNoteTagsNames-${newNote.resource_id}-${newNote.note_id}" />
                            <input type="hidden" name="selectedTagsColors" id="selectedNewNoteTagsColors-${newNote.resource_id}-${newNote.note_id}" />
                            <input type="hidden" name="selectedTagsColorsInv" id="selectedNewNoteTagsColorsInv-${newNote.resource_id}-${newNote.note_id}" />
                        </div>
                        ${tagsRowHtml}
                    </div>
                </div>
                <p class="single-note-text" id="note-${newNote.note_id}-text">${newNote.note_text}
                    <span class="single-note-targets" id="note-${newNote.note_id}-target-object">
                        ${linkHtml}
                    </span>
                    <span class="single-note-targets" id="note-${newNote.note_id}-target-pages">
                        ${pagesHtml}
                    </span>
                </p>
                `;
                // Append the new note element to the container (modify as per your layout)
                document.getElementById('notesbox-' + newNote.resource_id ).appendChild(newNoteElement);
                jscolor.install('body'); // it's needed to initialize the newly created color picker
                sortTagsRow();
                sortNotesToggle();
                // fade in animation
                document.getElementById(`note-id-${newNote.note_id}`).classList.remove("hidden");
                document.getElementById(`note-id-${newNote.note_id}`).classList.add("visible");
                // Optionally, reset the form after submission
                form.reset();
                document.getElementById(formId).classList.add("hidden")
                document.getElementById(formId).classList.remove("visible")

            } else {
                alert('Error adding note');
            }
        })
        .catch((error) => {
            console.error('Error posting note:', error);
            alert('An error occurred while posting the note.');
        });
    }


</script>

<!-- DELETE ITEMS - GLOBAL FUNCTIONS -->
<script>
    // Removal popup
    function showRemovePopup() {
        document.getElementById('remove-popup').style.display = 'flex';
    }
    function hideRemovePopup() {
        document.getElementById('remove-popup').style.display = 'none';
    }

    // Function to show confirmation popup and set the item ID, route, resource_id, type
    function showConfirmationPopup(itemId, route, resourceId, itemDOMid, additionalDomIdToDelete) {
        // Set the hidden item_id for deletion in the form dynamically
        document.querySelector('input[name="delete_item_id"]').value = itemId;
        // Set the hidden item_type for deletion in the form dynamically
        document.querySelector('input[name="delete_item_DOMid"]').value = itemDOMid;
        document.querySelector('input[name="delete_item_DOMid_additional"]').value = additionalDomIdToDelete;
        // Set the hidden resource_id for the item in the form dynamically
        document.querySelector('input[name="delete_resource_id"]').value = resourceId;
        // Set the action (route) dynamically
        // document.getElementById('delete-form').action = route;
        document.querySelector('input[name="delete_route"]').value = route;
        // Show the confirmation popup
        document.getElementById('confirmation-popup').style.display = 'flex';
    }

// Function to handle cancellation
function cancelDelete() {
    // Hide the confirmation popup without submitting the form
    document.getElementById('confirmation-popup').style.display = 'none';
}

// Delete Item (DELETE request using Axios)
// Function to handle deletion when user confirms
function confirmDelete() {
    // Hide the confirmation popup
    document.getElementById('confirmation-popup').style.display = 'none';

    const itemDomId = document.getElementById('delete-form').delete_item_DOMid.value;
    const additionalItemDomId = document.getElementById('delete-form').delete_item_DOMid_additional.value;
    const itemElement = document.getElementById(itemDomId);
    const additionalItemElement = document.getElementById(additionalItemDomId);
    const itemId = document.getElementById('delete-form').delete_item_id.value;
    const itemResourceId = document.getElementById('delete-form').delete_resource_id.value;
    const route = document.getElementById('delete-form').delete_route.value;
    // Adding a fade-out class for animation

    console.log("FE Delete request sent: ", itemDomId, additionalItemDomId, itemId, itemResourceId, route);
    
    // do data bedzie mozna dodawac kolejne opcje jezeli beda potrzebne, np. note_id przy kasowaniu tagow
    const data = {
        resource_id: itemResourceId, 
        item_id: itemId
    };

    // // After the animation, make the DELETE request BACKUP
    // setTimeout(() => {
    //     axios.post(route, data)
    //     .then(response => {
    //         if (response.data.success) {
    //             // Remove the item from the DOM
    //             itemElement.remove();

    //             // Additinal DOM operations for categories
    //             if (route == "/delete-category") {
    //                 additionalItemElement.remove();
    //                 document.querySelectorAll(`.book-with-category-${itemId}`).forEach(element => element.remove());
    //             }
    //         }
    //     })
    //     .catch(error => {
    //         console.error('Error deleting item:', error);
    //         alert('Error deleting item');
    //     });
    // }, 300); // Wait for animation to complete before sending DELETE request

    // After the animation, make the DELETE request

    axios.post(route, data)
    .then(response => {
        if (response.data.success) {
            // result depending on route
            if (route == "/delete-category") { //animation and delete for categories
                itemElement.classList.add('fade-out');
                additionalItemElement.classList.add("hidden-horizontal");
                additionalItemElement.classList.remove("visible-horizontal");
                const categoriesOnBooks = document.querySelectorAll(`.book-with-category-${itemId}`);
                categoriesOnBooks.forEach(element => element.classList.add("hidden-horizontal"));
                categoriesOnBooks.forEach(element => element.classList.remove("visible-horizontal"));
                setTimeout(() => {
                    itemElement.remove();
                    additionalItemElement.remove();
                    document.querySelectorAll(`.book-with-category-${itemId}`).forEach(element => element.remove());
                }, 500);
            } else if (route == "/delete-note") { //animation and delete for notes
                itemElement.classList.add('fade-out');
                setTimeout(() => {
                    itemElement.remove();
                }, 300);
            } else if (route == "/delete-tag") { //animation and delete for notes
                const tagElements = document.querySelectorAll(`.single-note-tags[data-id="${itemId}"]`);
                // const tagElements = [...allTagElements].filter((tag) => tag.getAttribute('data-id') == itemId);
                console.log(tagElements);
                tagElements.forEach(element => {
                    element.classList.add("fade-out");
                    element.classList.add("hidden-horizontal");
                    element.classList.remove("visible-horizontal");
                });
                setTimeout(() => {
                    tagElements.forEach(element => {
                        element.remove();
                    });
                }, 500);
            }
        }
    })
    .catch(error => {
        console.error('Error deleting item:', error);
        alert('Error deleting item');
    });

}


//ADD (DRAG) CATEGORY TO A RESOURCE
    let categoriesItemsList = document.getElementById('categories-list').querySelectorAll('.categories-item');
    let resourcesDropTargets = document.querySelectorAll('.user-book');
    // event listeners for draggable categories
    categoriesItemsList.forEach(item => {
        // drag start
        item.addEventListener('dragstart', (event) => {
            event.target.classList.add('dragging');
            event.dataTransfer.clearData();
            const categoryData = {
                id: item.getAttribute('data-id'),
                name: item.getAttribute('data-name'),
                draggable_cat_to_book: true
            };
            // console.log("category data send: ", categoryData);
            event.dataTransfer.setData("text/plain", JSON.stringify(categoryData) );

            //remove pointer events from book children
            resourcesDropTargets.forEach(book => {
                let children = book.querySelectorAll('*');
                children.forEach(child => {
                    child.style.pointerEvents = 'none';
                });
            });
        });
        // drag end
        item.addEventListener('dragend', (event) => {
            event.target.classList.remove('dragging');
            //restore pointer events for book children
            resourcesDropTargets.forEach(item => {
                let children = item.querySelectorAll('*');
                children.forEach(child => {
                    child.style.pointerEvents = '';
                });
            });
            // console.log("drag ended");
        });
    });

    // event listeners for resources
    resourcesDropTargets.forEach(item => {
        item.addEventListener('dragenter', (event) => {
            event.preventDefault();
            event.target.classList.add('dragover');
            // console.log("drag started");
        });
        item.addEventListener('dragleave', (event) => {
            event.preventDefault();
            event.target.classList.remove('dragover');
            // console.log("drag ended");
        });

        // to allow the drop by preventing the default behavior during dragover
        item.addEventListener('dragover', (event) => {
            event.preventDefault();  // This allows the drop event to be triggered
        });

        // drop
        item.addEventListener('drop', (event) => {
            event.preventDefault();
            const dataReceived = JSON.parse(event.dataTransfer.getData("text/plain"));
            dataReceived.resource_id = item.id.slice(12);
            // console.log("Data received", dataReceived);
            addCategoryToResource(dataReceived);
            event.target.classList.remove('dragover');
        });
    });

    //AFTER DROP FUNCTION WITH AXIOS ROUTE
    function addCategoryToResource(droppedData) {
        // console.log("dropped data:", droppedData);
        const selectedResource = document.querySelector(`#resource-id-${droppedData.resource_id}`)
        // console.log(selectedResource);
        let selectedResourceCategories = selectedResource.querySelector('.book-categories-row');

        //check if the category is already present or if it's a proper draggable object
        if (selectedResourceCategories.querySelector(`#book-${droppedData.resource_id}-cat-${droppedData.id}`) || !droppedData.draggable_cat_to_book) {
            return false;
        } else {
            //axios route
            axios.post("/assign-category", droppedData)
            .then(response => {
                if (response.data.success) {
                    // build html span element
                    let newHtmlElement = document.createElement('span');
                    newHtmlElement.classList.add('single-category', `book-with-category-${droppedData.id}`, 'hidden-horizontal');
                    newHtmlElement.setAttribute('id', `book-${droppedData.resource_id}-cat-${droppedData.id}`);
                    newHtmlElement.setAttribute('data-id', droppedData.id);
                    newHtmlElement.setAttribute('draggable', 'true');
                    newHtmlElement.innerText = droppedData.name;
                    addBookCatListeners(newHtmlElement, selectedResource);
                    selectedResourceCategories.appendChild(newHtmlElement);
                    sortCategoriesList();
                    setTimeout(() => {
                        document.getElementById(`book-${droppedData.resource_id}-cat-${droppedData.id}`).classList.remove("hidden-horizontal")
                        document.getElementById(`book-${droppedData.resource_id}-cat-${droppedData.id}`).classList.add("visible-horizontal")
                    }, 10); //time out żeby się animacje odpalały
                }
            })
            .catch(error => {
                console.error('Error assigning category:', error);
                alert('Error assigning category');
            });
        }
    }


//REMOVE (DRAG) CATEGORY FROM RESOURCE NOWA WERSJA Z FUNKCJA ZEWNETRZNA
    // event listeners for draggable categories
    const bucketButton = document.querySelector('#remove-item-bucket');
    // add listeners to one category function - needs calling elsewere
    function addBookCatListeners (categoryObj, bookObj){
        //drag start
        categoryObj.addEventListener('dragstart', (event) => {
            bucketButton.style.pointerEvents = 'auto'; //to prevent the hidden popup from interfering with category dragging
            event.target.classList.add('draggingdelete');
            event.dataTransfer.clearData();
            const categoryData = {
                resource_id: bookObj.getAttribute('data-id'),
                category_id: categoryObj.getAttribute('data-id'),
                draggable_cat_to_trash: true
            };
            // console.log("category data: ", categoryData);
            event.dataTransfer.setData("text/plain", JSON.stringify(categoryData) );

            //remove pointer events from book children
            resourcesDropTargets.forEach(book => {
                book.style.pointerEvents = 'none';  
                let children = book.querySelectorAll('*:not(.single-category)');
                children.forEach(child => {
                    child.style.pointerEvents = 'none';
                });
            });
            showRemovePopup();
        });

        //drag end
        categoryObj.addEventListener('dragend', (event) => {
            bucketButton.style.pointerEvents = ''; //restore popup pointer events
            event.target.classList.remove('draggingdelete');
            //restore pointer events for book children
            resourcesDropTargets.forEach(book => {
                book.style.pointerEvents = '';
                let children = book.querySelectorAll('*:not(.single-category)');
                children.forEach(child => {
                    child.style.pointerEvents = '';
                });
            });
            hideRemovePopup();
        });

    }

    // on page load assign listeners to each category item on each book
    resourcesDropTargets.forEach(book => {
        let bookCategories = book.querySelectorAll('.single-category');
        bookCategories.forEach(category =>{
            // console.log(category);
            addBookCatListeners(category, book);
        });
    });

    //BUCKET LISTENERS

    bucketButton.addEventListener('dragenter', (event) => {
        event.preventDefault();
        event.target.classList.add('dragover');
        // console.log("drag started");
    });
    bucketButton.addEventListener('dragleave', (event) => {
        event.preventDefault();
        event.target.classList.remove('dragover');
        // console.log("drag ended");
    });

    // to allow the drop by preventing the default behavior during dragover
    bucketButton.addEventListener('dragover', (event) => {
        event.preventDefault();  // This allows the drop event to be triggered
    });
    // drop
    bucketButton.addEventListener('drop', (event) => {
        event.preventDefault();
        const dataReceived = JSON.parse(event.dataTransfer.getData("text/plain"));
        // console.log("Data received", dataReceived);
        removeCategoryFromResource(dataReceived);
        event.target.classList.remove('dragover');
    });

    //AFTER DROP FUNCTION WITH AXIOS ROUTE
    function removeCategoryFromResource(droppedData) {
        // console.log("dropped data:", droppedData);
        let itemToRemove = document.querySelector(`#book-${droppedData.resource_id}-cat-${droppedData.category_id}`)

        //check if it's a proper draggable object
        if (!droppedData.draggable_cat_to_trash) {
            return false;
        } else {
            //axios route
            axios.post("/strip-category", droppedData)
            .then(response => {
                if (response.data.success) {
                    // console.log("response success");
                    itemToRemove.classList.add("hidden-horizontal");
                    itemToRemove.classList.remove("visible-horizontal");
                    setTimeout(() => {
                        itemToRemove.remove();
                        sortCategoriesList();
                    }, 500); //time out żeby się animacje odpalały
                }
            })
            .catch(error => {
                console.error('Error assigning category:', error);
                alert('Error assigning category');
            });
        }
    }

</script>

</body>
</html>