<footer>
    footer-sruter
</footer>

<script>
// SORT

    function sortCategoriesList(){
        //non ediatble list
        const nonEditList = document.querySelector('#categories-list');

        [...nonEditList.children]
        .sort((a, b) => a.innerText.localeCompare(b.innerText, undefined, {sensitivity: 'base'}))
        .forEach(node => nonEditList.appendChild(node));

        //editable list
        const editableList = document.querySelector('#categories-list-editable');

        [...editableList.children]
        .sort((a, b) => a.querySelector('li').getAttribute('data-name').localeCompare(b.querySelector('li').getAttribute('data-name'), undefined, {sensitivity: 'base'}))
        .forEach(node => editableList.appendChild(node));

        //bookheadings
        const bookHeadings = document.getElementsByClassName('book-categories-row');
        for (const item of bookHeadings) {
            [...item.children]
            .sort((a, b) => a.innerText.localeCompare(b.innerText, undefined, {sensitivity: 'base'}))
            .forEach(node => item.appendChild(node));
            }


    }
    function sortNotesToggle(order, singleResource){
        // trzeba jeszcze dodac togglowanie przy klikaniu ikony ze strzalka lub wyborze z listy
        const notesBoxes = singleResource?.getElementsByClassName('notes-box') ?? document.getElementsByClassName('notes-box');

        if (order == 'date-ascending') {
            for (const item of notesBoxes) {
            [...item.querySelectorAll('.single-note-item')]
            .sort((a, b) => a.querySelector('.note-date').innerText.localeCompare(b.querySelector('.note-date').innerText, undefined, {sensitivity: 'base'}))
            .forEach(node => item.appendChild(node));
            }
        } else {
            for (const item of notesBoxes) {
            [...item.querySelectorAll('.single-note-item')]
            .sort((b, a) => a.querySelector('.note-date').innerText.localeCompare(b.querySelector('.note-date').innerText, undefined, {sensitivity: 'base'}))
            .forEach(node => item.appendChild(node));
            }   
        }

    }
    //call sorting on page load
    sortCategoriesList();
    sortNotesToggle('date-descending', null);
    // a.localeCompare(b, undefined, {sensitivity: 'base'})


// FORM TO OBJECT CONVERT - REUSABLE FUNCTION
    function formToObject(formDomId){
        const form = document.getElementById(formDomId);
        // Create a FormData object from the form
        const formData = new FormData(form);
        // Convert FormData to a plain object (or you can directly send FormData)
        const formObjectData = {};
        formData.forEach((value, key) => {
            formObjectData[key] = value;
        });
        return formObjectData;
    }

// TOGGLE RESOURCE
// forceDirection can have "up" or "down" values
function toggleResource(id, forceDirection) {
        // console.log("Clicked ID: ", id);
        const rollout = document.getElementById("notesbox-" + id);
        let icon = document.getElementById('toggle-notes-icon-' + id);
        // check forced direction
        if (!forceDirection) {
            if (icon.classList.value === 'fa-solid fa-circle-chevron-down') {
                icon.classList.value = 'fa-solid fa-circle-chevron-up';
            } else {
                icon.classList.value = 'fa-solid fa-circle-chevron-down';
            }

            // console.log(rollout.classList);
            if (rollout.classList.value == "notes-box hidden" || rollout.classList.value === '') {
                rollout.classList.remove("hidden");
                rollout.classList.add("visible");
            } else {
                rollout.classList.add("hidden");
                rollout.classList.remove("visible");
            }
        } else if (forceDirection === "down") {
            icon.classList.value = 'fa-solid fa-circle-chevron-up';
            rollout.classList.remove("hidden");
            rollout.classList.add("visible");
        } else if (forceDirection === "up") {
            icon.classList.value = 'fa-solid fa-circle-chevron-down';
            rollout.classList.add("hidden");
            rollout.classList.remove("visible");
        }
    }



// ONCLICKS ale tylko niektore. te submity chyba beda do wywalenia - sprawdzic.

    function handler(id) {
        console.log(id);
        document.getElementById("add-" + id).classList.remove("hidden")
        document.getElementById("add-" + id).classList.add("visible")
        // document.getElementById("title" + id).setAttribute("hidden", true)
        // document.getElementById("edit" + id).setAttribute("hidden", true)
        // document.getElementById("done" + id).removeAttribute("hidden")
        // document.getElementById("input" + id).removeAttribute("hidden")
    }

// FILTERING RESOURCES BASIC FUNCTIONS
    let filtered = false;
    // const frontEndResources = <%-// JSON.stringify(resources) %>; //to chyba jednak nie bedzie potrzbene jak i cale zbieranie zasobow. niech ta funkcja opreuje tylko na DOM id'sach

    let filteredResourcesIds = [];
    let filteredResourcesDomIds = [];

    // zebranie wszystkich ksiazek
    const userBooks = document.getElementsByClassName('user-book');
    // zebranie DOMid wszystkich ksiazek
    let userBooksDomIds = [];
    for (let book of userBooks) {
        userBooksDomIds.push(book.id);
    };
    // console.log("User books DOM IDs: ", userBooksDomIds);
    filteredResourcesDomIds = [...userBooksDomIds];
    // console.log("filteredResourcesDomIds: ", filteredResourcesDomIds);

    function filterResources(add, remove, isolate) {
        // console.log("filtrowanie: ", add, remove, isolate);

        if (isolate) {
            filteredResourcesDomIds = [`resource-id-${isolate}`];
            toggleResource(isolate, "down");

            } else if(add) {
                const newId = `resource-id-${add}`;
                if (!filteredResourcesDomIds.includes(newId)) {
                    filteredResourcesDomIds.push(newId); // Only add if it doesn't exist already
                }
            } else if(remove) {
                const indexToRemove = filteredResourcesDomIds.indexOf(`resource-id-${remove}`);
                // console.log("Remove item index: ", indexToRemove);
                if (indexToRemove !== -1) {
                    filteredResourcesDomIds.splice(indexToRemove, 1);
                    // console.log("filteredResourcesDomIds: ", filteredResourcesDomIds);
                }
            }

        let booksToHide = userBooksDomIds.filter(domId => {
            return !filteredResourcesDomIds.includes(domId);
        });
        console.log("Books DOM IDs to hide: ", booksToHide);
        for (let bookId of booksToHide) {
            document.getElementById(bookId).classList.add("hidden")
            document.getElementById(bookId).classList.remove("visible")
        }
    }



// FILTER BY CATEGORY
    // na razie skopiowana na chama z tagsow
    let selectedCatIds = [];
    let selectedCatNames = [];

    function selectCategory(element, resourceId) {
        const catId = element.getAttribute('data-id');
        const catName = element.getAttribute('data-name');

        //Ids
        if (selectedCatIds.includes(catId)) {
            selectedCatIds = selectedCatIds.filter(id => id !== catId);
            element.classList.remove('clicked');
        } else {
            selectedCatIds.push(catId);
            element.classList.add('clicked');
        }
        //Names
        if (selectedCatNames.includes(catName)) {
            selectedCatNames = selectedCatNames.filter(name => name !== catName);
        } else {
            selectedCatNames.push(catName);
        }

        //tu dalej powinna byc funkcja filtrujaca

        // document.getElementById('selectedNewNoteCats-' + resourceId).value = selectedCatIds.join(',');
        // document.getElementById('selectedNewNoteCatsNames-' + resourceId).value = selectedCatNames.join(',');
    }


// ADD NEW CATEGORY
    function addNewCategory(formId) {
        // Prevent default form submission
        event.preventDefault();
        const form = document.getElementById(formId);
        const formObject = formToObject(formId);

        // Check if the input is not empty
        if (!formObject.newCategoryName) {
            return false;
        } else {
            // axios route
            axios.post('/add-category', formObject)
                .then((response) => {
                    // console.log("Response :" , response.data);
                    if (response.data.success) {
                        const newCategoryResponse = response.data.newCategory;
                        // console.log("Response data :", response.data);
                        // CREATE ELEMENTS
                        // non editable list
                        let newCategoryElement = document.createElement('li');
                        newCategoryElement.classList.add('categories-item');
                        newCategoryElement.setAttribute('id', `category-id-${newCategoryResponse.id}`);
                        newCategoryElement.setAttribute('draggable', 'true');
                        newCategoryElement.setAttribute('data-id', `${newCategoryResponse.id}`); 
                        newCategoryElement.setAttribute('data-name', `${formObject.newCategoryName}`); 
                        newCategoryElement.setAttribute('onclick', `selectCategory(this, ${newCategoryResponse.id})`); 
                        newCategoryElement.innerHTML = formObject.newCategoryName;
                        document.getElementById('categories-list').appendChild(newCategoryElement);
                        // editable list
                        let newCategoryEditableElement = document.createElement('div');
                        newCategoryEditableElement.classList.add('deletable-item', 'visible');
                        newCategoryEditableElement.setAttribute('id', `editable-category-row-${newCategoryResponse.id}`);

                        newCategoryEditableElement.innerHTML = `
                        <button 
                        class="icon-button tooltip-container" 
                        id="delete-category-${newCategoryResponse.id}"
                        type="button"
                        onclick="showConfirmationPopup('${newCategoryResponse.id}', '/delete-category', null, 'editable-category-row-${newCategoryResponse.id}', 'category-id-${newCategoryResponse.id}')">
                        <i class="fa-solid fa-trash"></i><span class="tooltip">delete category</span>
                        </button><li class="categories-item" data-id="${newCategoryResponse.id}" data-name="${formObject.newCategoryName}" ><input type="text" id="editable-category-${newCategoryResponse.id}" value="${formObject.newCategoryName}" required></li>
                        `;
                        document.getElementById('categories-list-editable').appendChild(newCategoryEditableElement);

                        form.reset();
                        sortCategoriesList()
                    } else {
                        alert('Error adding category (response).');
                    }
  
                })
                .catch((error) => {
                    console.error('Error adding category:', error);
                    alert('Error adding category (catch).');
                });

        }
    }

// EDIT CATEGORIES
    function editCategoriesToggle(){
        let categoriesListDisplay = document.getElementById('categories-list').style.display;
        let form = document.getElementById('edit-categories-form');
        // let categoriesEditListDisplay = document.getElementById('categories-list-editable').style.display;
        if (categoriesListDisplay == 'block') {
            document.getElementById('categories-list').style.display = 'none';
            document.getElementById('categories-list-editable').style.display = 'block'
            document.getElementById('edit-categories-submit-button').removeAttribute('disabled');
            document.getElementById('edit-categories-cancel-button').removeAttribute('disabled');
        } else {
            document.getElementById('categories-list').style.display = 'block';
            document.getElementById('categories-list-editable').style.display = 'none'
            document.getElementById('edit-categories-submit-button').disabled ='true';
            document.getElementById('edit-categories-cancel-button').disabled ='true';
            form.reset();
        }
    }


    // EDIT CATEGORIES
    function editCategoriesSubmit(formId){
        // Prevent default form submission
        event.preventDefault();

        // Get the form element
        // const form = document.getElementById(formId); chyba niepotrzbene juz
        // Get data from inputs, collect items to change
        const editableList = document.getElementById('categories-list-editable');
        const editableListItems = editableList.querySelectorAll('li.categories-item');

        // console.log(editableListItems);
        let formObject = [];
        editableListItems.forEach(cat => {
            formObject.push({
                id: cat.getAttribute('data-id'),
                name: cat.querySelector('input').value
            });

        });
        // console.log("formObject array :", formObject);

        // Check if there are no empty inputs
        if (formObject.find((item) => item.name == "")) {
            alert("Invalid category name!")
            return false;
        } else {
            // axios route
            axios.put('/edit-categories', formObject)
                .then((response) => {
                    // console.log("Response :" , response.data);
                    if (response.data.success) {
                        const newCategoryResponse = response.data.newCategory;
                        // console.log("Response data :", response.data);

                        // UPDATE HTML ELEMENTS
                        formObject.forEach(formItem => {
                            // non editable categories list
                            const nonEditableListItem = document.getElementById('categories-list').querySelector(`li[data-id="${formItem.id}"]`);
                            if (nonEditableListItem) {
                                nonEditableListItem.setAttribute('data-name', formItem.name);
                                nonEditableListItem.innerHTML = formItem.name;
                            }
                            // editable categories list
                            const editableListItem = document.getElementById('categories-list-editable').querySelector(`li[data-id="${formItem.id}"]`);
                            if (editableListItem) {
                                editableListItem.setAttribute('data-name', formItem.name);
                                const inputElement = editableListItem.querySelector('input');
                                inputElement.setAttribute('value', formItem.name);
                            }
                            // books
                            const booksCategories = document.getElementsByClassName(`book-with-category-${formItem.id}`);
                            if (booksCategories) {
                                for (const classInstance of booksCategories) {
                                    classInstance.innerHTML = formItem.name;
                                }
                            }
                        });

                        sortCategoriesList()
                        // toggle back the buttons
                        
                        editCategoriesToggle()

                    } else {
                        alert('Error updating categories (response).');
                    }
  
                })
                .catch((error) => {
                    console.error('Error updating categories:', error);
                    alert('Error updating categories (catch).');
                });
        }
    }








// ADD NEW NOTE
    // Submit or cancel new note form
    function cancelNewNote(id){
        document.getElementById(id).classList.add("hidden")
        document.getElementById(id).classList.remove("visible")
    }
    // BACKUP - DALEJ JEST NOWA FUNKCJA Z AXIOS
    // function submitNewNote(id){
    //     document.getElementById(id).classList.add("hidden")
    //     document.getElementById(id).classList.remove("visible")
    // }

    // Resize text areas automatically
    const textareas = document.getElementsByClassName('new-note-text');
    for (let element of textareas) {
        element.addEventListener('input', function() {
            // Reset the height to allow shrinking if necessary
            this.style.height = 'auto';
            // Set the new height based on the scroll height
            this.style.height = (this.scrollHeight) + 'px';
        });
    };


    // NEW NOTE ROLLOUT

    function newNoteRolloutToggle(id) {
        // event.preventDefault(); // Prevent default form submission - chyba przeszkadzalo
        const rollout = document.getElementById('tag-rollout-' + id);
        // change icon
        let triangle = document.getElementById('triangle-icon-' + id);
        if (triangle.classList.value === 'fa-solid fa-square-caret-right') {
            triangle.classList.value = 'fa-solid fa-square-caret-down';
        } else {
            triangle.classList.value = 'fa-solid fa-square-caret-right';
        }

        // Toggle tags rollouts
        if (rollout.classList.value == "tag-rollout-drawer hidden" || rollout.classList.value === '') {
            rollout.classList.remove("hidden");
            rollout.classList.add("visible");
        } else {
            rollout.classList.add("hidden");
            rollout.classList.remove("visible");
        }

    }

    // NEW NOTE ROLLOUT - SELECT TAGS
    let selectedTagIds = [];
    let selectedTagNames = [];
    let selectedTagColors = [];
    let selectedTagColorsInv = [];
    function selectTag(element, resourceId) {
        const tagId = element.getAttribute('data-id');
        const tagName = element.getAttribute('data-name');
        const tagColor = element.getAttribute('data-color');
        const tagInvertColor = element.getAttribute('data-invert-color');
        //Ids
        if (selectedTagIds.includes(tagId)) {
            selectedTagIds = selectedTagIds.filter(id => id !== tagId);
            element.classList.remove('clicked');
        } else {
            selectedTagIds.push(tagId);
            element.classList.add('clicked');
        }
        //Names
        if (selectedTagNames.includes(tagName)) {
            selectedTagNames = selectedTagNames.filter(name => name !== tagName);
        } else {
            selectedTagNames.push(tagName);
        }
        //Colors
        if (selectedTagColors.includes(tagColor)) {
            selectedTagColors = selectedTagColors.filter(color => color !== tagColor);
        } else {
            selectedTagColors.push(tagColor);
        }
        //Inverted Colors
        if (selectedTagColorsInv.includes(tagInvertColor)) {
            selectedTagColorsInv = selectedTagColorsInv.filter(color => color !== tagInvertColor);
        } else {
            selectedTagColorsInv.push(tagInvertColor);
        }
        document.getElementById('selectedNewNoteTags-' + resourceId).value = selectedTagIds.join(',');
        document.getElementById('selectedNewNoteTagsNames-' + resourceId).value = selectedTagNames.join(',');
        document.getElementById('selectedNewNoteTagsColors-' + resourceId).value = selectedTagColors.join(',');
        document.getElementById('selectedNewNoteTagsColorsInv-' + resourceId).value = selectedTagColorsInv.join(',');
    }

    // ta funkcja jeszcze nie testowana i nie dziala
    function addTag() {
        const newTagInput = document.getElementById('new-tag');
        const newTagName = newTagInput.value.trim();
        if (newTagName) {
            const newTagId = new Date().getTime(); // Generate a unique ID for the new tag
            const tagContainer = document.getElementById('tag-container');
            
            const newTagElement = document.createElement('span');
            newTagElement.className = 'tag single-note-tags';
            newTagElement.setAttribute('data-id', newTagId);
            newTagElement.textContent = newTagName;
            newTagElement.onclick = function() { selectTag(this); };
            
            tagContainer.appendChild(newTagElement);
            
            newTagInput.value = ''; // Clear the input box
        }
    }


// NOWE SUBMIT NOTE Z AXIOS i RES.JSON
    function submitNewNote(formId) {
        // Prevent default form submission
        event.preventDefault();

        // Get the form element
        const form = document.getElementById(formId);
        const formObject = formToObject(formId);

        // Send the data using axios
        axios.post('/add-note', formObject)
        .then((response) => {
            if (response.data.success) {
                const newNote = response.data.newNote;
                // console.log(newNote);

                // Create a new note DOM element
                const newNoteElement = document.createElement('div');
                newNoteElement.classList.add('single-note-item', 'deletable-item', 'hidden');
                newNoteElement.setAttribute('id', `note-id-${newNote.note_id}`);

                // create tags row
                let tagsRowHtml = "";
                for (const tag of newNote.selectedTags) {
                    tagsRowHtml = tagsRowHtml.concat(`<span class="single-note-tags" id="tag-id-${tag.id}" style="background-color: ${tag.color}; color: ${tag.invertColor}; border-color: ${tag.invertColor}">${tag.name}</span>`);
                }
                // empty fields check
                let pagesHtml = ""
                if (newNote.target_pages) {pagesHtml = `Pages: ${newNote.target_pages}`}
                let linkHtml = ""
                if (newNote.target_object) {linkHtml = `Link: <a href="${newNote.target_object}" rel="noopener noreferrer" target="_blank">${newNote.target_object}</a>`}
                
                newNoteElement.innerHTML = `
                <div class="note-heading-row">
                    <div class="note-date-del-edit-row">

                        <form action="/edit-note" method="post">
                            <input type="hidden" name="note_id" value="${newNote.note_id}">
                            <button class="icon-button tooltip-container" type="edit" name="edit-note" onclick="handler('edit-note')">
                                <i class="fa-solid fa-file-pen" aria-hidden="true"></i><span class="tooltip">edit note</span>
                            </button>
                        </form>

                        <button class="icon-button tooltip-container" id="delete-note-${newNote.note_id}" type="button" onclick="showConfirmationPopup('${newNote.note_id}', '/delete-note', '${newNote.resource_id}', 'note-id-${newNote.note_id}')">
                            <i class="fa-solid fa-trash" aria-hidden="true"></i><span class="tooltip">delete note</span>
                        </button>
                        <p class="note-date" value="date" id="note-${newNote.note_id}-date"> ${newNote.formattedDate}</p>

                    </div>
                    <!-- NOTE HEADING: TAGS -->
                    <p class="note-tags-row">
                        <button class="icon-button-tags tooltip-container" type="add" name="add-tag" onclick="handler('new-tag')">+<span class="tooltip">add tags</span></button>
                        ${tagsRowHtml}
                    </p>
                </div>
                <p class="single-note-text" id="note-${newNote.note_id}-text">${newNote.note_text}
                    <span class="single-note-targets" id="note-${newNote.note_id}-target-object">
                        ${linkHtml}
                    </span>
                    <span class="single-note-targets" id="note-${newNote.note_id}-target-pages">
                        ${pagesHtml}
                    </span>
                </p>
                `;
                // Append the new note element to the container (modify as per your layout)
                document.getElementById('notesbox-' + newNote.resource_id ).appendChild(newNoteElement);
                sortNotesToggle();
                // fade in animation
                document.getElementById(`note-id-${newNote.note_id}`).classList.remove("hidden");
                document.getElementById(`note-id-${newNote.note_id}`).classList.add("visible");
                // Optionally, reset the form after submission
                form.reset();
                document.getElementById(formId).classList.add("hidden")
                document.getElementById(formId).classList.remove("visible")

            } else {
                alert('Error adding note');
            }
        })
        .catch((error) => {
            console.error('Error posting note:', error);
            alert('An error occurred while posting the note.');
        });
    }


</script>

<!-- DELETE ITEMS - GLOBAL FUNCTIONS -->
<script>
    // Function to show confirmation popup and set the item ID, route, resource_id, type
    function showConfirmationPopup(itemId, route, resourceId, itemDOMid, additionalDomIdToDelete) {
        // Set the hidden item_id for deletion in the form dynamically
        document.querySelector('input[name="delete_item_id"]').value = itemId;
        // Set the hidden item_type for deletion in the form dynamically
        document.querySelector('input[name="delete_item_DOMid"]').value = itemDOMid;
        document.querySelector('input[name="delete_item_DOMid_additional"]').value = additionalDomIdToDelete;
        // Set the hidden resource_id for the item in the form dynamically
        document.querySelector('input[name="delete_resource_id"]').value = resourceId;
        // Set the action (route) dynamically
        // document.getElementById('delete-form').action = route;
        document.querySelector('input[name="delete_route"]').value = route;
        // Show the confirmation popup
        document.getElementById('confirmation-popup').style.display = 'flex';
    }

// Function to handle cancellation
function cancelDelete() {
    // Hide the confirmation popup without submitting the form
    document.getElementById('confirmation-popup').style.display = 'none';
}

// Delete Item (DELETE request using Axios)
// Function to handle deletion when user confirms
function confirmDelete() {
    // Hide the confirmation popup
    document.getElementById('confirmation-popup').style.display = 'none';

    const itemDomId = document.getElementById('delete-form').delete_item_DOMid.value;
    const additionalItemDomId = document.getElementById('delete-form').delete_item_DOMid_additional.value;
    const itemElement = document.getElementById(itemDomId);
    const additionalItemElement = document.getElementById(additionalItemDomId);
    const itemId = document.getElementById('delete-form').delete_item_id.value;
    const itemResourceId = document.getElementById('delete-form').delete_resource_id.value;
    const route = document.getElementById('delete-form').delete_route.value;
    // Adding a fade-out class for animation
    itemElement.classList.add('fade-out');
    console.log("FE Delete request sent: ", itemDomId, additionalItemDomId, itemId, itemResourceId, route);
    
    // do data bedzie mozna dodawac kolejne opcje jezeli beda potrzebne, np. note_id przy kasowaniu tagow
    const data = {
        resource_id: itemResourceId, 
        item_id: itemId
    };

    // After the animation, make the DELETE request
    setTimeout(() => {
        axios.post(route, data)
        .then(response => {
            if (response.data.success) {
                // Remove the item from the DOM
                itemElement.remove();

                // Additinal DOM operations for categories
                if (route == "/delete-category") {
                    additionalItemElement.remove();
                    document.querySelectorAll(`.book-with-category-${itemId}`).forEach(element => element.remove());
                }
            }
        })
        .catch(error => {
        console.error('Error deleting item:', error);
        alert('Error deleting item');
        });
    }, 300); // Wait for animation to complete before sending DELETE request
}


//ADD (DRAG) CATEGORY TO A RESOURCE
    let categoriesItemsList = document.getElementById('categories-list').querySelectorAll('.categories-item');
    let resourcesDropTargets = document.querySelectorAll('.user-book');

    categoriesItemsList.forEach(item => {
        
        item.addEventListener('dragstart', (event) => {
            event.target.classList.add('dragging');
            event.dataTransfer.clearData();
            const categoryData = {
                id: item.getAttribute('data-id'),
                name: item.getAttribute('data-name')
            };
            console.log("category data send: ", categoryData);
            event.dataTransfer.setData("text/plain", JSON.stringify(categoryData) );

            //remove pointer events from book children
            resourcesDropTargets.forEach(book => {
                let children = book.querySelectorAll('*');
                children.forEach(child => {
                    child.style.pointerEvents = 'none';
                });
            });
            console.log("drag started for :", item);
        });
        item.addEventListener('dragend', (event) => {
            event.target.classList.remove('dragging');
            //remove pointer events from book children
            resourcesDropTargets.forEach(item => {
                let children = item.querySelectorAll('*');
                children.forEach(child => {
                    child.style.pointerEvents = '';
                });
            });
            console.log("drag ended");
        });
    });


    resourcesDropTargets.forEach(item => {
        console.log(item);
        item.addEventListener('dragenter', (event) => {
            event.preventDefault();
            event.target.classList.add('dragover');
            // console.log("drag started");
        });
        item.addEventListener('dragleave', (event) => {
            event.preventDefault();
            event.target.classList.remove('dragover');
            // console.log("drag ended");
        });

        // Make sure to allow the drop by preventing the default behavior during dragover
        item.addEventListener('dragover', (event) => {
            event.preventDefault();  // This allows the drop event to be triggered
        });

        // drop
        item.addEventListener('drop', (event) => {
            event.preventDefault();
            const dataReceived = JSON.parse(event.dataTransfer.getData("text/plain"));
            dataReceived.resource_id = item.id.slice(12);
            console.log("Data received", dataReceived);
            // console.log("drop");
            addCategoryToResource(dataReceived);
            event.target.classList.remove('dragover');
        });
        
    //     let bookHeading = item.querySelector('.book-heading');
    //     if (bookHeading) {
    //     bookHeading.addEventListener('dragenter', (event) => {
    //         event.preventDefault();
    //         // Optionally add additional styles when dragging over the book-heading specifically
    //         item.classList.add('dragover');  // Ensure the parent gets the class
    //     });

    //     bookHeading.addEventListener('dragleave', (event) => {
    //         event.preventDefault();
    //         item.classList.remove('dragover');
    //     });
    // }
    });

    //AFTER DROP FUNCTION WITH AXIOS ROUTE
    function addCategoryToResource(droppedData) {
        console.log("dropped data:", droppedData);
        const selectedResource = document.querySelector(`#resource-id-${droppedData.resource_id}`)
        console.log(selectedResource);
        let selectedResourceCategories = selectedResource.querySelector('.book-categories-row');
        // for (const element of selectedResourceCategories) {
        //     console.log("that book has category ", element);
        // }
        //check if the category is already present
        if (selectedResourceCategories.querySelector(`#book-${droppedData.resource_id}-cat-${droppedData.id}`)) {
            console.log("This category exists", );
            return false;
        } else {
            console.log("This category not exists");
            //axios route
            axios.post("/assign-category", droppedData)
            .then(response => {
                if (response.data.success) {
                    console.log("response success");
                    // build html span element
                    let newHtmlElement = document.createElement('span');
                    newHtmlElement.classList.add('single-category', `book-with-category-${droppedData.id}`, 'hidden-horizontal');
                    newHtmlElement.setAttribute('id', `book-${droppedData.resource_id}-cat-${droppedData.id}`);
                    newHtmlElement.setAttribute('draggable', 'true');
                    newHtmlElement.innerText = droppedData.name;
                    selectedResourceCategories.appendChild(newHtmlElement);
                    sortCategoriesList();
                    setTimeout(() => {
                        document.getElementById(`book-${droppedData.resource_id}-cat-${droppedData.id}`).classList.remove("hidden-horizontal")
                        document.getElementById(`book-${droppedData.resource_id}-cat-${droppedData.id}`).classList.add("visible-horizontal")
                    }, 10); //time out żeby się animacje odpalały
                } else {
                    console.log("response wrong");
                }
            })
            .catch(error => {
            console.error('Error assigning category:', error);
            alert('Error assigning category');
            });
        }
        
    }

</script>

</body>
</html>